From f4d91176423a951634cbc9aa70ba4292109c7805 Mon Sep 17 00:00:00 2001
From: Tanmay Jagdale <tanmay@marvell.com>
Date: Fri, 12 Nov 2021 13:16:26 +0530
Subject: [PATCH 05/10] c_api_pkt_print_test: add support for cn10k chips

Update the c_api_pkt_print_test utility to support decoding of
trace on Marvell CN10K chips which have the following features:
  - Trace data generated is by Formatted by default.
  - The ETE Trace IDR registers have updated values.

Hence add a new command line argument (-cn10k) which would enable
CN10K specific settings in the utility.

While there, disable logging output to c_api_test.log file.

Upstream-Status: Pending

Signed-off-by: Tanmay Jagdale <tanmay@marvell.com>
Signed-off-by: Ruiqiang Hao <Ruiqiang.Hao@windriver.com>
---
 decoder/tests/source/c_api_pkt_print_test.c | 56 +++++++++++++++++++--
 1 file changed, 51 insertions(+), 5 deletions(-)

diff --git a/decoder/tests/source/c_api_pkt_print_test.c b/decoder/tests/source/c_api_pkt_print_test.c
index 5cb1c69..2588c2c 100644
--- a/decoder/tests/source/c_api_pkt_print_test.c
+++ b/decoder/tests/source/c_api_pkt_print_test.c
@@ -70,12 +70,17 @@ const char *tc2_snapshot = "\\TC2\\";
 const char *default_base_snapshot_path = "../../../snapshots";
 const char *juno_snapshot = "/juno_r1_1/";
 const char *otx2_snapshot = "/otx2/";
+const char *cn10k_snapshot = "/cn10k/";
 const char *tc2_snapshot = "/TC2/";
 #endif
 static const char *selected_snapshot;
 static const char *usr_snapshot_path = 0;
 #define MAX_TRACE_FILE_PATH_LEN 512
 
+static int cn10k_decoder = 0;
+static ocsd_dcd_tree_src_t dcd_tree_type = OCSD_TRC_SRC_SINGLE;
+static uint32_t deformatter_flags = 0x0;
+
 /* trace data and memory file dump names and values - taken from snapshot metadata */
 const char *trace_data_filename = "cstrace.bin";
 const char *stmtrace_data_filename = "cstraceitm.bin";
@@ -154,6 +159,13 @@ static int process_cmd_line(int argc, char *argv[])
             selected_snapshot = tc2_snapshot;
             mem_dump_address = mem_dump_address_tc2;
         }
+        else if (strcmp(argv[idx], "-cn10k") == 0)
+        {
+            selected_snapshot = cn10k_snapshot;
+            dcd_tree_type = OCSD_TRC_SRC_FRAME_FORMATTED;
+            deformatter_flags = OCSD_DFRMTR_FRAME_MEM_ALIGN;
+            cn10k_decoder = 1;
+        }
         else if (strcmp(argv[idx], "-ptm") == 0)
         {
             test_protocol = OCSD_PROTOCOL_PTM;
@@ -636,6 +648,39 @@ static ocsd_err_t create_generic_decoder(dcd_tree_handle_t handle, const char *p
     return ret;
 }
 
+/* ETE specific settings */
+static ocsd_err_t create_decoder_ete(dcd_tree_handle_t dcd_tree_h)
+{
+    ocsd_etmv4_cfg trace_config;
+
+    trace_config.arch_ver   = ARCH_V8;
+    trace_config.core_prof  = profile_CortexA;
+
+    trace_config.reg_configr    = 0x00008001;
+    trace_config.reg_traceidr   = 0x00000010;
+
+    if(test_trc_id_override != 0)
+    {
+        trace_config.reg_traceidr = (uint32_t)test_trc_id_override;
+    }
+
+    trace_config.reg_idr0   = 0x28000ea1;
+    trace_config.reg_idr1   = 0x4100fff0;
+    trace_config.reg_idr2   = 0xc0001088;
+    trace_config.reg_idr8   = 0x0;
+    trace_config.reg_idr9   = 0x0;
+    trace_config.reg_idr10  = 0x0;
+    trace_config.reg_idr11  = 0x0;
+    trace_config.reg_idr12  = 0x0;
+    trace_config.reg_idr13  = 0x0;
+
+    /*
+     * For now, use the ETMV4I decoder. Should switch to OCSD_BUILTIN_DCD_ETE in future.
+     * No context needed as we have a single stream to a single handler.
+     */
+    return create_generic_decoder(dcd_tree_h, OCSD_BUILTIN_DCD_ETMV4I, (void *)&trace_config, 0);
+}
+
 /*** ETMV4 specific settings ***/
 static ocsd_err_t create_decoder_etmv4(dcd_tree_handle_t dcd_tree_h)
 {
@@ -833,7 +878,10 @@ static ocsd_err_t create_decoder(dcd_tree_handle_t dcd_tree_h)
     switch(test_protocol)
     {
     case OCSD_PROTOCOL_ETMV4I:
-        err = create_decoder_etmv4(dcd_tree_h);
+        if (cn10k_decoder)
+            err = create_decoder_ete(dcd_tree_h);
+        else
+            err = create_decoder_etmv4(dcd_tree_h);
         break;
 
     case OCSD_PROTOCOL_ETMV3:
@@ -927,7 +975,7 @@ int process_trace_data(FILE *pf)
     /*  Create a decode tree for this source data.
         source data is frame formatted, memory aligned from an ETR (no frame syncs) so create tree accordingly 
     */
-    dcdtree_handle = ocsd_create_dcd_tree(OCSD_TRC_SRC_SINGLE, 0x0);
+    dcdtree_handle = ocsd_create_dcd_tree(dcd_tree_type, deformatter_flags);
 
     if(dcdtree_handle != C_API_INVALID_TREE_HANDLE)
     {
@@ -1059,8 +1107,6 @@ int main(int argc, char *argv[])
     /* default to juno */
     selected_snapshot = otx2_snapshot;
 
-    printf("Decoding otx2 snapshot ...\n");
-
     /* command line params */
     if(process_cmd_line(argc,argv) != 0)
     {
@@ -1085,7 +1131,7 @@ int main(int argc, char *argv[])
         
         /* set up the output - to file and stdout, set custom logfile name */
         if(ret == 0)
-            ret = ocsd_def_errlog_config_output(C_API_MSGLOGOUT_FLG_FILE | C_API_MSGLOGOUT_FLG_STDOUT, "c_api_test.log");
+            ret = ocsd_def_errlog_config_output(C_API_MSGLOGOUT_FLG_STDOUT, NULL);
 
         /* print sign-on message in log */
         sprintf(message, "C-API packet print test\nLibrary Version %s\n\n",ocsd_get_version_str());
-- 
2.45.0

